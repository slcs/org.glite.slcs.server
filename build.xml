<?xml version="1.0" encoding="UTF-8"?>
<!-- 
    Copyright (c) Members of the EGEE Collaboration. 2007.
    See http://www.eu-egee.org/partners/ for details on the copyright
    holders.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    ETICS build for org.glite.slcs.server

    Author: Valery Tschopp <tschopp@switch.ch>
    Version: $Id: build.xml,v 1.21 2009/01/20 12:08:31 vtschopp Exp $
-->
<project name="org.glite.slcs.server" default="local-dist" basedir=".">

    <!-- workspace directories -->
    <property name="workspace.dir" location=".." />
    <property name="stage.dir" location="${workspace.dir}/stage" />
    <property name="stage.lib.dir" location="${stage.dir}/share/java" />

    <!-- ETICS externals defs -->
    <import file="project/etics-externals.xml" />

    <!-- local properties -->
    <property file="build.properties" />

    <!-- module directories -->
    <property name="src.dir" location="${basedir}/src" />
    <property name="websrc.dir" location="${basedir}/websrc" />
    <property name="etc.dir" location="${basedir}/etc" />
    <property name="doc.dir" location="${basedir}/doc" />
    <property name="sql.dir" location="${basedir}/sql" />
    
    <!-- build dirs -->
    <property name="build.dir" location="${basedir}/build" />
    <property name="classes.dir" location="${build.dir}/classes" />
    <property name="test.classes.dir" location="${build.dir}/test/classes" />
    <property name="javadoc.dir" location="${build.dir}/javadoc"/>

    
    <!-- install dirs -->
    <property name="install.dir" location="${build.dir}/glite" />
    
    <!-- init -->
    <target name="init" depends="">
        <tstamp />
		<!-- check for the glite-slcs-common jar file in stage -->
    	<fileset id="glite-slcs-common.fileset" dir="${stage.lib.dir}">
            <include name="glite-slcs-common.jar"/>
        </fileset>
        <path id="glite-slcs-common.path">
        	<fileset refid="glite-slcs-common.fileset" />
        </path>
        <available classname="org.glite.slcs.SLCSException"
                   classpathref="glite-slcs-common.path"
                   property="glite-slcs-common.exists"/>
        <fail unless="glite-slcs-common.exists" message="ERROR: glite-slcs-common jar is missing. please build org.glite.slcs.common first..."/>
        <!-- classpath with libraries from ETICS repository -->
        <path id="compile.path">
            <path refid="glite-slcs-common.path"/>
            <path refid="ext.apache-struts.path"/>
            <path refid="ext.bouncycastle.path"/>
            <path refid="ext.jakarta-commons-codec.path"/>
            <path refid="ext.jakarta-commons-collections.path"/>
            <path refid="ext.jakarta-commons-configuration.path"/>
            <path refid="ext.jakarta-commons-httpclient.path"/>
            <path refid="ext.jakarta-commons-lang.path"/>
            <path refid="ext.jakarta-commons-logging.path"/>
            <path refid="ext.log4j.path"/>
            <path refid="ext.tomcat.path"/>
            <path refid="ext.novosec-bc-ext.path"/>
        </path>
        <path id="test.path">
            <path refid="compile.path"/>
            <pathelement path="${test.classes.dir}"/>
            <path refid="ext.junit.path"/>
        </path>
    </target>

    <!-- prepare -->
    <target name="prepare" depends="init">
        <mkdir dir="${classes.dir}" />
        <mkdir dir="${test.classes.dir}" />
    </target>

    <!-- compile -->
    <target name="compile" depends="prepare">
        <echo message="compile..."/>
        <javac srcdir="${src.dir}" debug="true" destdir="${classes.dir}">
            <classpath refid="compile.path" />
        </javac>
    </target>

    <!-- test.compile -->
    <target name="test.compile" depends="compile">
        <echo message="test.compile..."/>
        <javac srcdir="${test.src.dir}" debug="true" destdir="${test.classes.dir}">
            <classpath refid="test.path" />
        </javac>
    </target>

    <!-- test -->
    <target name="test" depends="test.compile">
        <echo message="test..."/>
        <!-- TODO: use junit... -->
    </target>

    <!-- jar -->
    <target name="jar" depends="compile">
        <!-- jar org.glite.slcs.server classes -->
        <jar jarfile="${build.dir}/${package.jarname}" basedir="${classes.dir}" />
    </target>

    <!-- OPTIONAL: stage glite-slcs-server.jar in ../stage/share/java dir -->
    <target name="stage" depends="jar">
        <echo message="stage in ${stage.lib.dir}" />
        <mkdir dir="${stage.lib.dir}" />
        <copy todir="${stage.lib.dir}" file="${build.dir}/${package.jarname}" />
    </target>
   
    <target name="war" depends="jar">
        <echo message="war webapp: ${package.name}"/>
        <delete file="${build.dir}/${package.name}.war" failonerror="false"/>
        
        <!-- create a temporary war-lib dir -->
        <property name="build.lib.dir" location="${build.dir}/war-lib"/>
        <mkdir dir="${build.lib.dir}"/>
        <!-- copy glite-slcs-server lib -->
        <copy todir="${build.lib.dir}" file="${build.dir}/${package.jarname}"/>
        <!-- copy glite-slcs-common lib -->
        <copy todir="${build.lib.dir}" >
            <fileset refid="glite-slcs-common.fileset"/>
        </copy>
        <!-- copy all third party libs (without tomcat libs) -->
        <copy todir="${build.lib.dir}" flatten="true">
            <fileset refid="ext.apache-struts.fileset"/>
            <fileset refid="ext.bouncycastle.fileset"/>
            <fileset refid="ext.jakarta-commons-codec.fileset"/>
            <fileset refid="ext.jakarta-commons-collections.fileset"/>
            <fileset refid="ext.jakarta-commons-configuration.fileset"/>
            <fileset refid="ext.jakarta-commons-httpclient.fileset"/>
            <fileset refid="ext.jakarta-commons-lang.fileset"/>
            <fileset refid="ext.jakarta-commons-logging.fileset"/>
            <fileset refid="ext.log4j.fileset"/>
            <fileset refid="ext.mysql-jdbc.fileset"/>
            <fileset refid="ext.novosec-bc-ext.fileset"/>
        </copy>
        
        <!-- create war file -->
        <war destfile="${build.dir}/${package.name}.war"
             webxml="${websrc.dir}/WEB-INF/web.xml">
            <!-- WEB-INF content -->
            <webinf dir="${websrc.dir}/WEB-INF">
                <include name="*.xml" />
                <exclude name="web.xml" />
            </webinf>
            <!-- WEB-INF/classes content -->
            <classes dir="${etc.dir}">
<!--                <include name="log4j.xml" /> -->
                <include name="*.properties" />
            </classes>
            <!-- WEB-INF/lib content -->
            <lib dir="${build.lib.dir}">
                <include name="*.jar"/>
            </lib>
            <!-- web content -->
            <fileset dir="${websrc.dir}">
                <exclude name="WEB-INF/**" />
                <include name="**/*.jsp" />
                <include name="css/*" />
                <include name="images/*" />
                <include name="js/*.js" />
            </fileset>
        </war>
        <echo>
        NOTICE: BouncyCastle libraries MUST go in TOMCAT common/lib directory!!!
        </echo>

    </target>
    
    <!-- javadoc -->
    <target name="javadoc">
        <javadoc packagenames="org.glite.slcs.*"
            excludepackagenames="org.glite.slcs.struts.*"
            sourcepath="${src.dir}"
            destdir="${javadoc.dir}"
            classpathref="compile.path"/>
    </target>
    
    <!-- prepare installation layout in ${install.dir} -->
    <target name="install-layout" depends="war">
        <echo message="prepare install in ${install.dir}"/>
        <property name="install.bin.dir" location="${install.dir}/bin"/>
        <property name="install.log.dir" location="${install.dir}/var/log"/>
        <property name="install.webapps.dir" location="${install.dir}/share/webapps"/>
        <property name="install.etc.dir" location="${install.dir}/etc/${package.name}"/>
        <property name="install.doc.dir" location="${install.dir}/share/doc/${package.name}"/>
        <property name="install.javadoc.dir" location="${install.doc.dir}/api"/>

        <!-- first clean up -->
        <delete dir="${install.dir}"/>

        <!-- create install dir -->
        <!--  <mkdir dir="${install.bin.dir}"/> -->
        <mkdir dir="${install.etc.dir}"/>
        <mkdir dir="${install.log.dir}"/>
        <mkdir dir="${install.webapps.dir}"/>
        <mkdir dir="${install.doc.dir}"/>
        <mkdir dir="${install.javadoc.dir}"/>
        <!-- etc config + SQL script -->
        <copy todir="${install.etc.dir}">
            <fileset dir="${etc.dir}">
                <include name="*.xml" />
                <include name="*.jks" />
            </fileset>
            <fileset dir="${sql.dir}">
                <include name="*.sql" />
            </fileset>
         </copy>
        <!-- doc -->
        <copy todir="${install.doc.dir}">
            <fileset dir="${doc.dir}" />
        </copy>
        <!-- javadoc -->
        <copy todir="${install.javadoc.dir}" failonerror="false">
            <fileset dir="${javadoc.dir}" />
        </copy>
        <!-- application war -->
        <copy todir="${install.webapps.dir}" file="${build.dir}/${package.name}.war"/>
        <!-- empty logfile -->
        <touch file="${install.log.dir}/glite-slcs-server.log" />
        
   </target>
   
   <!-- install used by ETICS packager: ant -Dprefix=${prefix} install -->
   <target name="install" depends="install-layout,stage">
        <!-- copy everything in $prefix -->
        <echo message="install in ${prefix}"/>
        <copy todir="${prefix}">
            <fileset dir="${install.dir}"/>
        </copy>
    </target>

    <!-- package standalone lib with full dependencies -->
    <target name="full-package" depends="install-layout">
        <echo message="package..."/>
    </target>
    
    <!-- create local standalone tar.gz distribution  -->
    <target name="local-dist" depends="clean,full-package">
        <property name="dist.file"
            value="${package.name}-${package.version}-jdk${ant.java.version}.tar.gz" />
        <tar destfile="${dist.file}" compression="gzip" basedir="${install.dir}" />
   </target>
    
    <!-- clean -->
    <target name="clean">
        <!-- Delete the ${build} and ${dist} directory trees -->
        <delete dir="${build.dir}" failonerror="false"/>
        <delete dir="${install.dir}" failonerror="false"/>
        <!-- etics build system clean up -->
        <delete dir="RPMS" failonerror="false"/>
        <delete dir="tgz" failonerror="false"/>
        <delete dir="rpmbuild" failonerror="false"/>
    </target>

    <!-- download eternals dependencies in local repository -->
    <target name="repository" depends="init">
       <download-ext external="ext.apache-struts" />
       <download-ext external="ext.bouncycastle" />
       <download-ext external="ext.jakarta-commons-codec" />
       <download-ext external="ext.jakarta-commons-collections" />
       <download-ext external="ext.jakarta-commons-configuration" />
       <download-ext external="ext.jakarta-commons-httpclient" />
       <download-ext external="ext.jakarta-commons-lang" />
       <download-ext external="ext.jakarta-commons-logging" />
       <download-ext external="ext.junit" />
       <download-ext external="ext.log4j" />
       <download-ext external="ext.mysql-jdbc" />
       <download-ext external="ext.tomcat" />
       <download-ext external="ext.novosec-bc-ext" />
    </target>
    
</project>
